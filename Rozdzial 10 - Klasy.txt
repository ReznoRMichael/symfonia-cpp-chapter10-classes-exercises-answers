Dobre praktyki programisty:
- każda klasa w osobnym pliku. A raczej w osobnych dwóch. Skraca to czas kompilacji, a także można z nich skorzystać także w innych programach.
- dopóki w programie masz mniej niż tysiąc klas, można nad tym nieźle panować
- na samej górze klasy dawać składniki public (te są najbardziej interesujące dla przyszłego użytkownika klasy)
- niżej dawać składniki protected
- na samym dole dawać składniki private (te interesują tylko tego, kto pracuje nad daną klasą)
- aby łatwiej odróżniać klasy od obiektów, dobrze jest nazwy naszych klas zaczynać od dużej litery T (Type)
- jeśli funkcja składowa klasy ma więcej niż dwie linijki, to lepiej definiować ją poza definicją klasy (void Tklasa::Tfunkcja () {} )
- jeśli przesyłamy funkcji składowej adres obiektu tej klasy (this), dobrze, jeśli funkcja zagwarantuje mu nietykalność, np. void funkcja_skladowa( const Tklasa *adresObiektu ) - wywołanie tej funkcji:
funkcja_skladowa( this )
- najlepiej wymyślać inne nazwy na zmienne niż polegać na zasłanianiu nazw, bo łatwo się pozapominać i pogubić
- nie starać się z obszaru klasy pracować z nazwami obiektów globalnych - lepiej przesłać go jako argument funkcji składowej i pracować na nim pod własną nazwą - w przeciwnym razie klasa będzie polegała na nazwach zaszytych na stałe w programie i może uniemożliwiać innym kompilację
- przy przesyłaniu obiektu do funkcji jako argument - lepiej przesłać przez referencję (Tklasa & obiekt), niż zwykłym sposobem przez wartość (optymalizacja czasu i pamięci)
- konstruktor jest funkcją, przy której najczęściej spotyka się przeładowanie nazwy, aby przygotować się na różne warianty (np. przeliczanie godzin, minut, sekund...)
- definicję składnika statycznego najlepiej umieszczać na samej górze pliku w którym umieszczamy definicje funkcji składowych. (np. w Tklasa.cpp, a nie w Tklasa.h)

I. Prawdziwe zdania:
b) Klasa to typ
c) Składnikiem klasy może być obiekt typu double
d) Składnikiem klasy może być funkcja
e) Składnikiem klasy może być obiekt innej klasy

II. Kapsułowanie (enkapsulacja) - to określenie na zamykanie w jednym dużym kontenerze wszystkich zmiennych lub funkcji właściwych jednej klasie, w celu łatwiejszego (szybszego) korzystania z nich w przyszłości. Zamiast definiować wszystko od nowa pojedynczo za każdym razem, możemy po prostu sięgnąć po wcześniej utworzoną kapsułę (klasę).

III. Funkcje składowe klasy (metody) - mają zakres ważności danej klasy.

IV. W klasie można utworzyć funkcję składową o takiej samej nazwie i takich samych argumentach, jak istniejąca funkcja globalna. Wtedy nastąpi zasłonięcie danej nazwy (przeładowanie nazwy funkcji występuje wyłącznie gdy funkcje występują w tym samym zakresie ważności).

V. W klasie mogą istnieć dwie funkcje składowe (metody) o tej samej nazwie, ale pod warunkiem, że przyjmują różne argumenty (przeładowanie funkcji).

VI. Składniki klasy z etykietą public są dostępne:
- wewnątrz samej klasy
- spoza zakresu klasy (włącznie z funkcjami)
- zwykle takimi składnikami są jakieś wybrane funkcje składowe. To za ich pomocą dokonuje się z zewnątrz operacji na danych prywatnych.

VII. Składniki klasy z etykietą private są dostępne:
- tylko z wnętrza samej klasy
- także dla funkcji zaprzyjaźnionych z daną klasą
- tylko funkcje będące składnikami danej klasy mogą te dane odczytywać lub zapisywać
- w przypadku funkcji oznacza to, że mogą one zostać wywołane tylko z innych funkcji składowych tej klasy
- używany zwykle gdy zależy nam na ukryciu jakichś informacji

VIII. Dostęp do składników klasy jest ustawiony standardowo na private, jeśli sami nie zdefiniujemy dostępu.

IX. W danej klasie funkcja składowa public może wywołać funkcję składową private.

X. Funkcja składowa klasy która ma ciało zdefiniowane poza definicją klasy - ma dostęp do składników private.

XI. Nie ma różnicy pomiędzy definicją funkcji składowej klasy poza definicją klasy a wewnątrz niej, poza tym, że dla kompilatora ta wewnątrz klasy jest automatycznie traktowana jako funkcja inline.
Jeśli chcemy, aby funkcja zdefiniowana poza definicją klasy była również inline, to można użyć przedrostka inline.

XII. Metoda klasy - to inna nazwa na funkcję składową klasy (member function). Pochodzi z czasów innych, dawniejszych obiektowych języków programowania.

XIII. Wskaźnik this - wewnątrz funkcji składowej danej klasy, wskaźnik "this" pokazuje na ten jeden konkretny obiekt, na rzecz którego funkcja składowa ma zostać wykonana. Aby uprościć pisanie funkcji w C++, jest to zrobione niejawnie za nas. Można go również pisać, nie będzie to błędem.
Zwykły wskaźnik "this" jest typu klasy, do obiektów której się odnosi.

XIV. Odnoszenie się do obiektu globalnego o takiej samej nazwie z wewnątrz klasy - można to zrobić za pomocą operatora zakresu ::
Na przykład do zmiennej o nazwie temperatura można się odnieść przy pomocy ::temperatura . (ale lepiej tego nie robić)

XV. W funkcji składowej klasy jest blok if, w nim obiekt nnn, identyczny co składnik klasy nnn i co obiekt globalny nnn 
a) jest to zasłanianie nazwy, a nie przeładowanie
b) odniesienie się do obiektu globalnego z zakresu lokalnego if - robimy to przy pomocy operatora ::nnn
c) odniesienie się do składnika klasy z zakresu lokalnego - robimy to przy pomocy nazwy klasy z operatorem zasięgu Tklasa::nnn 
d) odniesienie się do lokalnego obiektu z zakresu if - robimy to przy pomocy zwykłej nazwy nnn

XVI. Uwaga! Nazwa obiektu może również zasłonić nazwę funkcji.

XVII. Uwaga! Nazwa funkcji może również zasłonić nazwę obiektu.

XVIII. Klasa A, funkcja składowa fff. Może nastąpić przeładowanie nazwy tej funkcji składowej wewnątrz klasy. Nawet jeśli argumenty pasują do funkcji globalnej, to jeśli wywołamy przeładowaną funkcję składową fff, będzie to zawsze funkcja istniejąca wewnątrz klasy (ponieważ funkcja globalna jest zasłonięta).

XIX. Strażnik nagłówka - 
#ifndef Tklasa.h
#define Tklasa.h
/* program */
#endif
Chroni użytkownika przed omyłkowym wstawieniem tego pliku nagłówkowego dwukrotnie.

XX. Każda klasa w dwóch plikach: polega na tym, że w pliku nagłówkowym Tklasa.h są same deklaracje i składniki klasy (zmienne) i ew. funkcje inline, a w pliku Tklasa.cpp definicje funkcji składowych (nie-inline).

XXI. Klasa TTT. Składnik klasy - 8000-elementowa tablica int o nazwie t1. Obiekt obj.
Gdy obiekt obj takiej klasy TTT wysyłamy przez wartość do jakiejś funkcji, to otrzymuje ona wskaźnik do tablicy t1 obiektu obj.

XXII. Konstruktor - funkcja składowa klasy. Jest wykonywana automatycznie w czasie powołania obiektu klasy do życia.
Typ rezultatu konstruktora: Nie ma tam nic, nie może tam być nawet void. Nie może wystąpić return.
Pełna nazwa konstruktora: Nazywa się tak samo jak klasa. Czyli jeśli klasa nazywa się Tklasa, to ma konstruktor Tklasa().
Przykładowe wykorzystanie konstruktora, dwa sposoby:
- Tklasa obiekt = Tklasa(15);
- Tklasa obiekt(15); - najczęściej stosowany

XXIII. Destruktor - funkcja składowa klasy. Jest wykonywana automatycznie gdy obiekt danej klasy ma zakończyć swój żywot, np. po zakończeniu zakresu lokalnego, funkcji, zakończeniu programu. Kiedy jest uruchamiany, zależy od kompilatora. Można go też uruchomić ręcznie: obiekt.~Tklasa();
Typ rezultatu destruktora: Podobnie jak destruktor, nie ma tam nic, nie może tam być nawet void. Nie może wystąpić return.
Pełna nazwa destruktora: Nazywa się tak samo jak klasa + wężyk (~). Czyli destruktor klasy Tklasa nazywa się ~Tklasa().

Przykładowe zastosowania:
- zadbanie o zmazanie jakiejś informacji lub obiektu z ekranu
- zadbanie o zwolnienie pamięci
- może służyć do odtworzenia wyglądu menu, jeśli obiektem jest menu narysowane na ekranie

XXIV. W klasie można dokonywać przeładowania konstruktora. Jest to najczęściej przeładowywana funkcja.

XXV. Przeładowanie destruktora. Destruktory nie mogą być przeładowane i nie mogą akceptować parametrów.

XXVI. Składnik statyczny: istnieje nawet w momencie gdy nie powołano do życia żadnego obiektu. To taka informacja bardziej o samej klasie niż o obiekcie. Np. może liczyć, ile obiektów powołano do życia, ile razy wywołano jakąś funkcję, ile wykonano napraw itd. Można dzieki temu znacznie zmniejszyć ilość zmiennych globalnych.

Klasa K. Publiczny składnik statyczny bool o nazwie flaga. Trzy obiekty klasy K: x1, x2, x3. Obiekt x1 wpisał sobie do niego wartość true.
a) x2 i x3 mogą się o nim dowiedzieć za pomocą:
- Tklasa::skladnik
- x2.skladnik lub x3.skladnik
b) z zakresu funkcji main o tym składniku można się dowiedzieć:
- Tklasa::skladnik
- x1.skladnik
- x2.skladnik lub x3.skladnik
- Za pomocą wskaźnika ustawionego na obiekt jakiejś klasy, np. Tklasa * wsk; wsk->skladnik

XXVII. Składnik statyczny prywatny przy swojej definicji leżącej poza ciałem klasy może mieć wyrażenie inicjalizujące go.

XXVIII. W definicji składnika statycznego klasy nie występuje słowo static. Jest potrzebne wyłącznie wewnątrz klasy. Przy definicji natomiast podajemy przedrostek z nazwą klasy i operatorem :: aby odróżnić go od zmiennych globalnych. Np. int Tklasa::zmienna_statyczna;

XXIX. Składnik nie-statyczny typu int o nazwie sn. Składnik statyczny typu int o nazwie ss.
a) Pełna nazwa typu składnika sn = Tklasa::int;
b) Pełna nazwa typu składnika ss = int;


Składowe funkcje statyczne.
- Można się dzięki nim odnosić do całej klasy, do której należy, nie tylko do jednego obiektu ( Tklasa::funkcja(); )
- Można dzięki nim z zewnątrz odnosić się do składników private danej klasy (niemożliwe przy zwykłych obiektach).
- Można ją wywołać nawet wtedy, kiedy nie istnieje żaden obiekt danej klasy
- Takie funkcje nie zawierają wskaźnika this. Można w nich pracować tylko na danych statycznych (chyba że podamy jeden konkretny obiekt np. obiekt1.skladnik lub wskaznik->skladnik. )

XXXIII. Mamy klasę, ale jeszcze nie zdefiniowaliśmy ani jednego jej obiektu.
W statycznej funkcji składowej klasy możemy:
a) pracować ze statycznymi publicznymi składnikami tej klasy
b) pracować ze statycznymi prywatnymi składnikami tej klasy

XXXIV. Jeśli jeszcze nie istnieje żaden obiekt danej klasy, to składową funkcję statyczną możemy wywołać poprzez Tklasa::funkcja();

XXXV. W statycznych funkcjach składowych klasy nie istnieje wskaźnik this.

XXXVI. Statyczną funkcję składową można wywołać również na rzecz jakiegoś obiektu jej klasy.

XXXVII. Funkcja składowa z przydomkiem const.
- Taka funkcja obiecuje, że nie będzie moodyfikować danych składowych jakiegoś obiektu.
a) Specyfikator const umieszcza się na końcu funkcji, tuż przed średnikiem (za nawiasami)
b) Specyfikator const powtarza się również w tym samym miejscu, jeśli funkcja jest zdefiniowana poza ciałem klasy.

XXXVIII. Funkcję składową const można wywołać na rzecz stałego obiektu klasy.

XXXIX. Funkcję składową const można wywołać na rzecz nie-stałego obiektu tej klasy.

XL. Funkcji składowej nie-const nie można wywołać na rzecz stałego obiektu klasy.

XLI. Funkcję składową nie-const można wywołać na rzecz nie-stałego obiektu klasy.

XLII. Dla dociekliwych.
a) Jaki jest typ wskaźnika this w funkcji składowej const? = const Tklasa *
b) Jaki jest typ wskaźnika this w funkcji składowej volatile? = volatile Tklasa *
c) Jaki jest typ wskaźnika this w funkcji składowej const volatile? = const volatile Tklasa *

XLIII. Konstruktor bez przydomka const może pracować na rzecz stałego obiektu swojej klasy. Inaczej nie mógłby pracować na składnikach swojej własnej klasy.

XLIV. Przydomek mutable = nie może być zastosowany do obiektu globalnego.

XLV. Przydomek mutable w obiektach klasy, które nie są stworzone jako stałe, nie ma żadnego dodatkowego działania - po prostu obiekt zwykły nie jest zamrażany.

XLVI. Przydomek mutable w stałym obiekcie klasy pozwala wyjątkowo na zmianę wartości tego akurat składnika obiektu nawet przez funkcję const. Tworzy dla tego składnika jak gdyby wyjątek od reguły.